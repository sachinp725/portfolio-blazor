@implements IDisposable
@using Portfolio.Shared.Icons
@inject NavigationManager NavigationManager

<aside class="sidebar">
    <div class="sidebarTop">
        <a href="/">
            <div class="iconContainer @GetActiveLinkClass("/")">
                <FilesIcon Fill="@GetFillColor("/")" />
            </div>
        </a>
        <a href="/github">
            <div class="iconContainer @GetActiveLinkClass("/github")">
                <GithubIcon Fill="@GetFillColor("/github")" />
            </div>
        </a>
        <a href="/projects">
            <div class="iconContainer @GetActiveLinkClass("/projects")">
                <CodeIcon Fill="@GetFillColor("/projects")" />
            </div>
        </a>
        <a href="/contact">
            <div class="iconContainer @GetActiveLinkClass("/contact")">
                <MailIcon Fill="@GetFillColor("/contact")" />
            </div>
        </a>       
    </div>
    <div class="sidebarBottom">
        <a href="/about">
            <div class="iconContainer @GetActiveLinkClass("/about")">
                <MailIcon Fill="@GetFillColor("/about")" />
            </div>
        </a>
        <a href="/settings">
            <div class="iconContainer @GetActiveLinkClass("/settings")">
                <SettingsIcon Fill="@GetFillColor("/settings")" />
            </div>
        </a>
    </div>

</aside>

@code {
    private string currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        // Subscribe to the event
        NavigationManager.LocationChanged += LocationChanged;
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }

    public string GetFillColor(string path)
    {
        return path == $"/{currentUrl}" ? "rgb(225, 228, 232)" : "rgb(106, 115, 125)";
    }

    private string GetActiveLinkClass(string path)
    {
        return path == $"/{currentUrl}" ? "active" : "";
    }
}
